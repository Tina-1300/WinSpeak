{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"WinSpeak Warning This project is only available on Windows. Welcome to the WinSpeak Library Documentation : WinSpeak is a modern, powerful, and easy-to-use C++ library for controlling speakers in Windows. It allows you to manage volume, mute/unmute speakers, and query audio status simply, quickly, and securely. Documentation : WinSpeak Documentation (1.1.0) Contributors : Creator of the library : Tina Support for other projects : OpenCVE Information Author : Tina Date : 20/05/2025 Version : 1.1.0 Copyright : 2025 Tina - All rights reserved","title":"Welcome"},{"location":"index.html#winspeak","text":"Warning This project is only available on Windows. Welcome to the WinSpeak Library Documentation : WinSpeak is a modern, powerful, and easy-to-use C++ library for controlling speakers in Windows. It allows you to manage volume, mute/unmute speakers, and query audio status simply, quickly, and securely.","title":"WinSpeak"},{"location":"index.html#documentation","text":"WinSpeak Documentation (1.1.0)","title":"Documentation :"},{"location":"index.html#contributors","text":"Creator of the library : Tina","title":"Contributors :"},{"location":"index.html#support-for-other-projects","text":"OpenCVE","title":"Support for other projects :"},{"location":"index.html#information","text":"Author : Tina Date : 20/05/2025 Version : 1.1.0 Copyright : 2025 Tina - All rights reserved","title":"Information"},{"location":"FAQ.html","text":"FAQ - WinSpeak 1. What platforms does WinSpeak work on? WinSpeak is currently only compatible with Windows 10. 2. What version of C++ is required? The project uses C++20 or higher. 3. How do I install WinSpeak? Use CMake to generate the project files. 4. How can I contribute to the project? Read the CONTRIBUTING.md file for steps. 5. How do I report a bug or security vulnerability? See the SECURITY.md file for details on how to contact us securely. 6. What are the future plans for WinSpeak? Check out our ROADMAP.md for planned features!","title":"FAQ"},{"location":"FAQ.html#faq-winspeak","text":"","title":"FAQ - WinSpeak"},{"location":"FAQ.html#1-what-platforms-does-winspeak-work-on","text":"WinSpeak is currently only compatible with Windows 10.","title":"1. What platforms does WinSpeak work on?"},{"location":"FAQ.html#2-what-version-of-c-is-required","text":"The project uses C++20 or higher.","title":"2. What version of C++ is required?"},{"location":"FAQ.html#3-how-do-i-install-winspeak","text":"Use CMake to generate the project files.","title":"3. How do I install WinSpeak?"},{"location":"FAQ.html#4-how-can-i-contribute-to-the-project","text":"Read the CONTRIBUTING.md file for steps.","title":"4. How can I contribute to the project?"},{"location":"FAQ.html#5-how-do-i-report-a-bug-or-security-vulnerability","text":"See the SECURITY.md file for details on how to contact us securely.","title":"5. How do I report a bug or security vulnerability?"},{"location":"FAQ.html#6-what-are-the-future-plans-for-winspeak","text":"Check out our ROADMAP.md for planned features!","title":"6. What are the future plans for WinSpeak?"},{"location":"announcements.html","text":"Announcements Note Version 1.2.0 will be released soon, which will allow you to manage all audio devices available on the device.","title":"Announcements"},{"location":"announcements.html#announcements","text":"Note Version 1.2.0 will be released soon, which will allow you to manage all audio devices available on the device.","title":"Announcements"},{"location":"installation.html","text":"\ud83d\udee0\ufe0f Build To compile this library, you will need: CMake A C++20 compiler Compilation Steps To compile this library, you will need Cmake and C++. Then run these commands : mkdir build && cd build cmake .. -DCMAKE_BUILD_TYPE=Release cmake --build . cmake --install . After installation, you will find a WinSpeak/ folder in build/, containing: include/ : Library header files lib/ : Compiled binary files (.lib, .dll, etc.) Manual Installation Simply copy the contents of the include/ and lib/ folders into your development environment. Compiling a program using WinSpeak Example command with g++: g++ -O2 -Wall -Wextra -o test.exe test.cpp -lWinSpeak -lole32 -lstdc++ -luuid","title":"Installation"},{"location":"installation.html#build","text":"To compile this library, you will need: CMake A C++20 compiler Compilation Steps To compile this library, you will need Cmake and C++. Then run these commands : mkdir build && cd build cmake .. -DCMAKE_BUILD_TYPE=Release cmake --build . cmake --install . After installation, you will find a WinSpeak/ folder in build/, containing: include/ : Library header files lib/ : Compiled binary files (.lib, .dll, etc.) Manual Installation Simply copy the contents of the include/ and lib/ folders into your development environment. Compiling a program using WinSpeak Example command with g++: g++ -O2 -Wall -Wextra -o test.exe test.cpp -lWinSpeak -lole32 -lstdc++ -luuid","title":"\ud83d\udee0\ufe0f Build"},{"location":"about/CHANGELOG.html","text":"Changelog All notable changes to this project are documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning . [1.0.0] - 2025-04-26 Added Creation of the WinSpeak library Retrieving speaker volume values Changing the master volume Speaker muting and unmuting capabilities Speaker muting and unmuting functionality Clean API based on the ISpeak interface Windows implementation using IAudioEndpointVolume Full adherence to SOLID principles Initial documentation [1.1.0] - 2025-05-20 Added Added official documentation Refactor all code based on SOLID principles","title":"Changelog"},{"location":"about/CHANGELOG.html#changelog","text":"All notable changes to this project are documented in this file. The format is based on Keep a Changelog , and this project adheres to Semantic Versioning .","title":"Changelog"},{"location":"about/CHANGELOG.html#100-2025-04-26","text":"","title":"[1.0.0] - 2025-04-26"},{"location":"about/CHANGELOG.html#added","text":"Creation of the WinSpeak library Retrieving speaker volume values Changing the master volume Speaker muting and unmuting capabilities Speaker muting and unmuting functionality Clean API based on the ISpeak interface Windows implementation using IAudioEndpointVolume Full adherence to SOLID principles Initial documentation","title":"Added"},{"location":"about/CHANGELOG.html#110-2025-05-20","text":"","title":"[1.1.0] - 2025-05-20"},{"location":"about/CHANGELOG.html#added_1","text":"Added official documentation Refactor all code based on SOLID principles","title":"Added"},{"location":"about/CODE_OF_CONDUCT.html","text":"Contributor Code of Conduct Our Commitment We are committed to providing a friendly, safe, and welcoming environment, regardless of age, body type, disability, ethnicity, etc. Our Standards Examples of positive behavior: - Use welcoming and inclusive language - Respect different points of view - Accept constructive criticism Reporting If you witness or experience inappropriate behavior, please contact us privately. Thank you for contributing to a healthy and respectful project!","title":"Code of conduct"},{"location":"about/CODE_OF_CONDUCT.html#contributor-code-of-conduct","text":"","title":"Contributor Code of Conduct"},{"location":"about/CODE_OF_CONDUCT.html#our-commitment","text":"We are committed to providing a friendly, safe, and welcoming environment, regardless of age, body type, disability, ethnicity, etc.","title":"Our Commitment"},{"location":"about/CODE_OF_CONDUCT.html#our-standards","text":"Examples of positive behavior: - Use welcoming and inclusive language - Respect different points of view - Accept constructive criticism","title":"Our Standards"},{"location":"about/CODE_OF_CONDUCT.html#reporting","text":"If you witness or experience inappropriate behavior, please contact us privately. Thank you for contributing to a healthy and respectful project!","title":"Reporting"},{"location":"about/ROADMAP.html","text":"\ud83d\udccd Roadmap - WinSpeak Welcome to the official roadmap for the WinSpeak project! This document describes the planned features, future enhancements, and long-term goals of the project. \ud83d\ude80 Main Objectives Provide a SOLID C++ library for volume and mute control on Windows. Offer a simple, clean, and stable API for interacting with system speakers. Ensure excellent compatibility on Windows 10. Fully document each feature with examples. Maintain a high level of code quality (unit tests, etc.). \ud83d\udcc5 \u200b\u200bDevelopment Plan Version Feature Status 1.0.0 Master Volume Control \u2705 Done 1.0.0 is_muted / get_volume / set_volume / set_mute Function \u2705 Done 1.1.0 Write Documentation \u2705 Done 1.1.0 Refactor all code based on SOLID principles \u2705 Done 1.2.0 Support for Controlling Multiple Audio Devices \ud83d\udd32 To Do \ud83d\udee4\ufe0f Future Ideas (Unplanned) be Linux compatible \ud83d\udce2 How to Contribute? If you would like to suggest a feature or contribute to the roadmap, please open an issue with the enhancement tag. Thank you for your interest in WinSpeak \ud83d\ude80!","title":"Roadmap"},{"location":"about/ROADMAP.html#roadmap-winspeak","text":"Welcome to the official roadmap for the WinSpeak project! This document describes the planned features, future enhancements, and long-term goals of the project.","title":"\ud83d\udccd Roadmap - WinSpeak"},{"location":"about/ROADMAP.html#main-objectives","text":"Provide a SOLID C++ library for volume and mute control on Windows. Offer a simple, clean, and stable API for interacting with system speakers. Ensure excellent compatibility on Windows 10. Fully document each feature with examples. Maintain a high level of code quality (unit tests, etc.).","title":"\ud83d\ude80 Main Objectives"},{"location":"about/ROADMAP.html#development-plan","text":"Version Feature Status 1.0.0 Master Volume Control \u2705 Done 1.0.0 is_muted / get_volume / set_volume / set_mute Function \u2705 Done 1.1.0 Write Documentation \u2705 Done 1.1.0 Refactor all code based on SOLID principles \u2705 Done 1.2.0 Support for Controlling Multiple Audio Devices \ud83d\udd32 To Do","title":"\ud83d\udcc5 \u200b\u200bDevelopment Plan"},{"location":"about/ROADMAP.html#future-ideas-unplanned","text":"be Linux compatible","title":"\ud83d\udee4\ufe0f Future Ideas (Unplanned)"},{"location":"about/ROADMAP.html#how-to-contribute","text":"If you would like to suggest a feature or contribute to the roadmap, please open an issue with the enhancement tag. Thank you for your interest in WinSpeak \ud83d\ude80!","title":"\ud83d\udce2 How to Contribute?"},{"location":"about/SECURITY.html","text":"Security Policy Vulnerability Reporting If you discover a vulnerability, please report it by creating a ticket directly on this repository. We ask that you clearly describe the vulnerability and provide steps to reproduce it. Your contributions will help us quickly resolve potential issues. You can send us video evidence of how you exploited the vulnerability by email. Email : tina.xytrfgthuji1348@gmail.com","title":"Security"},{"location":"about/SECURITY.html#security-policy","text":"","title":"Security Policy"},{"location":"about/SECURITY.html#vulnerability-reporting","text":"If you discover a vulnerability, please report it by creating a ticket directly on this repository. We ask that you clearly describe the vulnerability and provide steps to reproduce it. Your contributions will help us quickly resolve potential issues. You can send us video evidence of how you exploited the vulnerability by email. Email : tina.xytrfgthuji1348@gmail.com","title":"Vulnerability Reporting"},{"location":"about/contributing.html","text":"Contribute to WinSpeak Thank you for wanting to contribute! Contribution Process Fork this repository Create a branch ( feature/my-new-feature ) Commit your changes Push your branch Open a Pull Request Coding Rules Respect the project style (C++ conventions) One feature = one Pull Request Provide unit tests if possible Standards Strict adherence to SOLID principles Clean code and C++20 minimum","title":"Contribute"},{"location":"about/contributing.html#contribute-to-winspeak","text":"Thank you for wanting to contribute!","title":"Contribute to WinSpeak"},{"location":"about/contributing.html#contribution-process","text":"Fork this repository Create a branch ( feature/my-new-feature ) Commit your changes Push your branch Open a Pull Request","title":"Contribution Process"},{"location":"about/contributing.html#coding-rules","text":"Respect the project style (C++ conventions) One feature = one Pull Request Provide unit tests if possible","title":"Coding Rules"},{"location":"about/contributing.html#standards","text":"Strict adherence to SOLID principles Clean code and C++20 minimum","title":"Standards"},{"location":"about/license.html","text":"MIT License Copyright (c) 2025 Tina Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"Licence"},{"location":"about/team.html","text":"The WinSpeak Team WinSpeak is passionately developed by a 15-year-old developer with no collaborators. Main members \ud83d\udc64 (Tina) R\u00f4le : Founder and Lead Developer Comp\u00e9tences : C++, Windows API Bio : Passionate about library creation, I developed WinSpeak with the aim of offering a clear, well-documented and powerful solution for C++ developers wanting to use speakers. Team Values \ud83e\udde0 Clarity : Documentation that is understandable for all levels. \ud83d\udd10 Security : Features designed with safety as a priority. \u2699\ufe0f Performance : A fast library, without compromise. \ud83e\udd1d Opening : We encourage constructive contributions and feedback. Join us If you share our vision and would like to contribute, please visit the page contribute .","title":"The team"},{"location":"about/team.html#the-winspeak-team","text":"WinSpeak is passionately developed by a 15-year-old developer with no collaborators.","title":"The WinSpeak Team"},{"location":"about/team.html#main-members","text":"","title":"Main members"},{"location":"about/team.html#tina","text":"R\u00f4le : Founder and Lead Developer Comp\u00e9tences : C++, Windows API Bio : Passionate about library creation, I developed WinSpeak with the aim of offering a clear, well-documented and powerful solution for C++ developers wanting to use speakers.","title":"\ud83d\udc64 (Tina)"},{"location":"about/team.html#team-values","text":"\ud83e\udde0 Clarity : Documentation that is understandable for all levels. \ud83d\udd10 Security : Features designed with safety as a priority. \u2699\ufe0f Performance : A fast library, without compromise. \ud83e\udd1d Opening : We encourage constructive contributions and feedback.","title":"Team Values"},{"location":"about/team.html#join-us","text":"If you share our vision and would like to contribute, please visit the page contribute .","title":"Join us"},{"location":"features/features.html","text":"Documentation : WinSpeak Method of the WinSpeak class Method name Documentation get_volume() get_volume.md set_volume() set_volume.md is_muted() is_muted.md set_mute() set_mute.md","title":"Features"},{"location":"features/features.html#documentation-winspeak","text":"","title":"Documentation : WinSpeak"},{"location":"features/features.html#method-of-the-winspeak-class","text":"Method name Documentation get_volume() get_volume.md set_volume() set_volume.md is_muted() is_muted.md set_mute() set_mute.md","title":"Method of the WinSpeak class"},{"location":"features/get_volume.html","text":"Fonction : get_volume() Description This method returns a float type which is the current speaker volume Settings No parameters.. Returned value returns the current speaker volume via a float type. Example of use #include <WinSpeak/WinSpeak.hpp> #include <WinSpeak/AudioDeviceManager.hpp> #include <iostream> // g++ -O2 -Wall -Wextra -o test.exe test.cpp -lWinSpeak -lole32 -lstdc++ -luuid int main(){ try { WinSpeak::AudioDeviceManager manager; WinSpeak::WinSpeak speaker(&manager); std::cout << \"the current volume : \" << speaker.get_volume() << \" %\" << \"\\n\"; }catch (const std::exception& e){ std::cerr << \"Error : \" << e.what() << \"\\n\"; } return 0; }","title":"Get volume"},{"location":"features/get_volume.html#fonction-get_volume","text":"","title":"Fonction : get_volume()"},{"location":"features/get_volume.html#description","text":"This method returns a float type which is the current speaker volume","title":"Description"},{"location":"features/get_volume.html#settings","text":"No parameters..","title":"Settings"},{"location":"features/get_volume.html#returned-value","text":"returns the current speaker volume via a float type.","title":"Returned value"},{"location":"features/get_volume.html#example-of-use","text":"#include <WinSpeak/WinSpeak.hpp> #include <WinSpeak/AudioDeviceManager.hpp> #include <iostream> // g++ -O2 -Wall -Wextra -o test.exe test.cpp -lWinSpeak -lole32 -lstdc++ -luuid int main(){ try { WinSpeak::AudioDeviceManager manager; WinSpeak::WinSpeak speaker(&manager); std::cout << \"the current volume : \" << speaker.get_volume() << \" %\" << \"\\n\"; }catch (const std::exception& e){ std::cerr << \"Error : \" << e.what() << \"\\n\"; } return 0; }","title":"Example of use"},{"location":"features/is_muted.html","text":"Fonction : is_muted() Description Returns true if the audio is muted, false if it is not muted. Settings No parameters.. Returned value Returns true if the audio is muted, false if it is not muted. Example of use #include <WinSpeak/WinSpeak.hpp> #include <WinSpeak/AudioDeviceManager.hpp> #include <iostream> // g++ -O2 -Wall -Wextra -o test.exe test.cpp -lWinSpeak -lole32 -lstdc++ -luuid int main(){ try { WinSpeak::AudioDeviceManager manager; WinSpeak::WinSpeak speaker(&manager); std::cout << \"Audio muted : \" << (speaker.is_muted() ? \"yes\" : \"no\") << \"\\n\"; }catch (const std::exception& e){ std::cerr << \"Error : \" << e.what() << \"\\n\"; } return 0; }","title":"Is muted"},{"location":"features/is_muted.html#fonction-is_muted","text":"","title":"Fonction : is_muted()"},{"location":"features/is_muted.html#description","text":"Returns true if the audio is muted, false if it is not muted.","title":"Description"},{"location":"features/is_muted.html#settings","text":"No parameters..","title":"Settings"},{"location":"features/is_muted.html#returned-value","text":"Returns true if the audio is muted, false if it is not muted.","title":"Returned value"},{"location":"features/is_muted.html#example-of-use","text":"#include <WinSpeak/WinSpeak.hpp> #include <WinSpeak/AudioDeviceManager.hpp> #include <iostream> // g++ -O2 -Wall -Wextra -o test.exe test.cpp -lWinSpeak -lole32 -lstdc++ -luuid int main(){ try { WinSpeak::AudioDeviceManager manager; WinSpeak::WinSpeak speaker(&manager); std::cout << \"Audio muted : \" << (speaker.is_muted() ? \"yes\" : \"no\") << \"\\n\"; }catch (const std::exception& e){ std::cerr << \"Error : \" << e.what() << \"\\n\"; } return 0; }","title":"Example of use"},{"location":"features/set_mute.html","text":"Fonction : set_mute() Description allows you to change the current state of the speaker to either mute or unmute it Settings Parameter name Type Description mute bool A boolean value. Pass true to mute the audio, or false to unmute it. Returned value Returns true if the mute status was successfully set, false in case of an error. Example of use #include <WinSpeak/WinSpeak.hpp> #include <WinSpeak/AudioDeviceManager.hpp> #include <iostream> // g++ -O2 -Wall -Wextra -o test.exe test.cpp -lWinSpeak -lole32 -lstdc++ -luuid int main(){ try { WinSpeak::AudioDeviceManager manager; WinSpeak::WinSpeak speaker(&manager); std::cout << \"press enter to continue\" << \"\\n\"; std::cin.get(); if(speaker.set_mute(true)){ std::cout << \"Speaker muted\" << \"\\n\"; } std::cout << \"press enter to continue\" << \"\\n\"; std::cin.get(); if(speaker.set_mute(false)){ std::cout << \"Speaker unmuted\" << \"\\n\"; } std::cout << \"press enter to exit\" << \"\\n\"; std::cin.get(); }catch (const std::exception& e){ std::cerr << \"Error : \" << e.what() << \"\\n\"; } return 0; }","title":"Set mute"},{"location":"features/set_mute.html#fonction-set_mute","text":"","title":"Fonction : set_mute()"},{"location":"features/set_mute.html#description","text":"allows you to change the current state of the speaker to either mute or unmute it","title":"Description"},{"location":"features/set_mute.html#settings","text":"Parameter name Type Description mute bool A boolean value. Pass true to mute the audio, or false to unmute it.","title":"Settings"},{"location":"features/set_mute.html#returned-value","text":"Returns true if the mute status was successfully set, false in case of an error.","title":"Returned value"},{"location":"features/set_mute.html#example-of-use","text":"#include <WinSpeak/WinSpeak.hpp> #include <WinSpeak/AudioDeviceManager.hpp> #include <iostream> // g++ -O2 -Wall -Wextra -o test.exe test.cpp -lWinSpeak -lole32 -lstdc++ -luuid int main(){ try { WinSpeak::AudioDeviceManager manager; WinSpeak::WinSpeak speaker(&manager); std::cout << \"press enter to continue\" << \"\\n\"; std::cin.get(); if(speaker.set_mute(true)){ std::cout << \"Speaker muted\" << \"\\n\"; } std::cout << \"press enter to continue\" << \"\\n\"; std::cin.get(); if(speaker.set_mute(false)){ std::cout << \"Speaker unmuted\" << \"\\n\"; } std::cout << \"press enter to exit\" << \"\\n\"; std::cin.get(); }catch (const std::exception& e){ std::cerr << \"Error : \" << e.what() << \"\\n\"; } return 0; }","title":"Example of use"},{"location":"features/set_volume.html","text":"Fonction : set_volume() Description The volume to define must be a number between 0.0f and 100.0f (inclusive). Settings Parameter name Type Description volume float float value to adjust speaker volume Returned value Returns true if the volume was correctly modified, false in case of error. Example of use #include <WinSpeak/WinSpeak.hpp> #include <WinSpeak/AudioDeviceManager.hpp> #include <iostream> // g++ -O2 -Wall -Wextra -o test.exe test.cpp -lWinSpeak -lole32 -lstdc++ -luuid int main(){ try { WinSpeak::AudioDeviceManager manager; WinSpeak::WinSpeak speaker(&manager); std::cout << (speaker.set_volume(100.0f) ? \"Speaker 100%\" : \"An error has occurred\" ) << \"\\n\"; }catch (const std::exception& e){ std::cerr << \"Error : \" << e.what() << \"\\n\"; } return 0; }","title":"Set volume"},{"location":"features/set_volume.html#fonction-set_volume","text":"","title":"Fonction : set_volume()"},{"location":"features/set_volume.html#description","text":"The volume to define must be a number between 0.0f and 100.0f (inclusive).","title":"Description"},{"location":"features/set_volume.html#settings","text":"Parameter name Type Description volume float float value to adjust speaker volume","title":"Settings"},{"location":"features/set_volume.html#returned-value","text":"Returns true if the volume was correctly modified, false in case of error.","title":"Returned value"},{"location":"features/set_volume.html#example-of-use","text":"#include <WinSpeak/WinSpeak.hpp> #include <WinSpeak/AudioDeviceManager.hpp> #include <iostream> // g++ -O2 -Wall -Wextra -o test.exe test.cpp -lWinSpeak -lole32 -lstdc++ -luuid int main(){ try { WinSpeak::AudioDeviceManager manager; WinSpeak::WinSpeak speaker(&manager); std::cout << (speaker.set_volume(100.0f) ? \"Speaker 100%\" : \"An error has occurred\" ) << \"\\n\"; }catch (const std::exception& e){ std::cerr << \"Error : \" << e.what() << \"\\n\"; } return 0; }","title":"Example of use"}]}